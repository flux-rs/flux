(function() {
    var type_impls = Object.fromEntries([["flux_middle",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Bump\" class=\"impl\"><a href=\"#impl-Bump\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Bump</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>() -&gt; Bump</h4></section></summary><div class=\"docblock\"><p>Construct a new arena to bump allocate into.</p>\n<h6 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::new();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_new</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Bump, AllocErr&gt;</h4></section></summary><div class=\"docblock\"><p>Attempt to construct a new arena to bump allocate into.</p>\n<h6 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::try_new();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Bump</h4></section></summary><div class=\"docblock\"><p>Construct a new arena with the specified byte capacity to bump allocate into.</p>\n<h6 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::with_capacity(<span class=\"number\">100</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_with_capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Bump, AllocErr&gt;</h4></section></summary><div class=\"docblock\"><p>Attempt to construct a new arena with the specified byte capacity to bump allocate into.</p>\n<h6 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::try_with_capacity(<span class=\"number\">100</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocation_limit\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">allocation_limit</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>The allocation limit for this arena in bytes.</p>\n<h6 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::with_capacity(<span class=\"number\">0</span>);\n\n<span class=\"macro\">assert_eq!</span>(bump.allocation_limit(), <span class=\"prelude-val\">None</span>);\n\nbump.set_allocation_limit(<span class=\"prelude-val\">Some</span>(<span class=\"number\">6</span>));\n\n<span class=\"macro\">assert_eq!</span>(bump.allocation_limit(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">6</span>));\n\nbump.set_allocation_limit(<span class=\"prelude-val\">None</span>);\n\n<span class=\"macro\">assert_eq!</span>(bump.allocation_limit(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_allocation_limit\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_allocation_limit</a>(&amp;self, limit: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>Set the allocation limit in bytes for this arena.</p>\n<p>The allocation limit is only enforced when allocating new backing chunks for\na <code>Bump</code>. Updating the allocation limit will not affect existing allocations\nor any future allocations within the <code>Bump</code>’s current chunk.</p>\n<h6 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::with_capacity(<span class=\"number\">0</span>);\n\nbump.set_allocation_limit(<span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n\n<span class=\"macro\">assert!</span>(bump.try_alloc(<span class=\"number\">5</span>).is_err());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reset\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">reset</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Reset this bump allocator.</p>\n<p>Performs mass deallocation on everything allocated in this arena by\nresetting the pointer into the underlying chunk of memory to the start\nof the chunk. Does not run any <code>Drop</code> implementations on deallocated\nobjects; see <a href=\"struct.Bump.html\">the top-level documentation</a> for details.</p>\n<p>If this arena has allocated multiple chunks to bump allocate into, then\nthe excess chunks are returned to the global allocator.</p>\n<h6 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bump = bumpalo::Bump::new();\n\n<span class=\"comment\">// Allocate a bunch of things.\n</span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">100 </span>{\n        bump.alloc(i);\n    }\n}\n\n<span class=\"comment\">// Reset the arena.\n</span>bump.reset();\n\n<span class=\"comment\">// Allocate some new things in the space previously occupied by the\n// original things.\n</span><span class=\"kw\">for </span>j <span class=\"kw\">in </span><span class=\"number\">200</span>..<span class=\"number\">400 </span>{\n    bump.alloc(j);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">alloc</a>&lt;T&gt;(&amp;self, val: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Allocate an object in this <code>Bump</code> and return an exclusive reference to\nit.</p>\n<h6 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h6>\n<p>Panics if reserving space for <code>T</code> fails.</p>\n<h6 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::new();\n<span class=\"kw\">let </span>x = bump.alloc(<span class=\"string\">\"hello\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x, <span class=\"string\">\"hello\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_alloc\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_alloc</a>&lt;T&gt;(&amp;self, val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, AllocErr&gt;</h4></section></summary><div class=\"docblock\"><p>Try to allocate an object in this <code>Bump</code> and return an exclusive\nreference to it.</p>\n<h6 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h6>\n<p>Errors if reserving space for <code>T</code> fails.</p>\n<h6 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::new();\n<span class=\"kw\">let </span>x = bump.try_alloc(<span class=\"string\">\"hello\"</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"string\">\"hello\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">alloc_with</a>&lt;F, T&gt;(&amp;self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Pre-allocate space for an object in this <code>Bump</code>, initializes it using\nthe closure, then returns an exclusive reference to it.</p>\n<p>See <a href=\"#initializer-functions-the-_with-method-suffix\">The <code>_with</code> Method Suffix</a> for a\ndiscussion on the differences between the <code>_with</code> suffixed methods and\nthose methods without it, their performance characteristics, and when\nyou might or might not choose a <code>_with</code> suffixed method.</p>\n<h6 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h6>\n<p>Panics if reserving space for <code>T</code> fails.</p>\n<h6 id=\"example-9\"><a class=\"doc-anchor\" href=\"#example-9\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::new();\n<span class=\"kw\">let </span>x = bump.alloc_with(|| <span class=\"string\">\"hello\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x, <span class=\"string\">\"hello\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_alloc_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_alloc_with</a>&lt;F, T&gt;(&amp;self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, AllocErr&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Tries to pre-allocate space for an object in this <code>Bump</code>, initializes\nit using the closure, then returns an exclusive reference to it.</p>\n<p>See <a href=\"#initializer-functions-the-_with-method-suffix\">The <code>_with</code> Method Suffix</a> for a\ndiscussion on the differences between the <code>_with</code> suffixed methods and\nthose methods without it, their performance characteristics, and when\nyou might or might not choose a <code>_with</code> suffixed method.</p>\n<h6 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h6>\n<p>Errors if reserving space for <code>T</code> fails.</p>\n<h6 id=\"example-10\"><a class=\"doc-anchor\" href=\"#example-10\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::new();\n<span class=\"kw\">let </span>x = bump.try_alloc_with(|| <span class=\"string\">\"hello\"</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"string\">\"hello\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc_try_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">alloc_try_with</a>&lt;F, T, E&gt;(&amp;self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Pre-allocates space for a <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html\"><code>Result</code></a> in this <code>Bump</code>, initializes it using\nthe closure, then returns an exclusive reference to its <code>T</code> if <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#variant.Ok\"><code>Ok</code></a>.</p>\n<p>Iff the allocation fails, the closure is not run.</p>\n<p>Iff <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#variant.Err\"><code>Err</code></a>, an allocator rewind is <em>attempted</em> and the <code>E</code> instance is\nmoved out of the allocator to be consumed or dropped as normal.</p>\n<p>See <a href=\"#initializer-functions-the-_with-method-suffix\">The <code>_with</code> Method Suffix</a> for a\ndiscussion on the differences between the <code>_with</code> suffixed methods and\nthose methods without it, their performance characteristics, and when\nyou might or might not choose a <code>_with</code> suffixed method.</p>\n<p>For caveats specific to fallible initialization, see\n<a href=\"#fallible-initialization-the-_try_with-method-suffix\">The <code>_try_with</code> Method Suffix</a>.</p>\n<h6 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h6>\n<p>Iff the allocation succeeds but <code>f</code> fails, that error is forwarded by value.</p>\n<h6 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h6>\n<p>Panics if reserving space for <code>Result&lt;T, E&gt;</code> fails.</p>\n<h6 id=\"example-11\"><a class=\"doc-anchor\" href=\"#example-11\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::new();\n<span class=\"kw\">let </span>x = bump.alloc_try_with(|| <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"hello\"</span>))<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x, <span class=\"string\">\"hello\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_alloc_try_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_alloc_try_with</a>&lt;F, T, E&gt;(\n    &amp;self,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, AllocOrInitError&lt;E&gt;&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Tries to pre-allocates space for a <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html\"><code>Result</code></a> in this <code>Bump</code>,\ninitializes it using the closure, then returns an exclusive reference\nto its <code>T</code> if all <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#variant.Ok\"><code>Ok</code></a>.</p>\n<p>Iff the allocation fails, the closure is not run.</p>\n<p>Iff the closure returns <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#variant.Err\"><code>Err</code></a>, an allocator rewind is <em>attempted</em> and\nthe <code>E</code> instance is moved out of the allocator to be consumed or dropped\nas normal.</p>\n<p>See <a href=\"#initializer-functions-the-_with-method-suffix\">The <code>_with</code> Method Suffix</a> for a\ndiscussion on the differences between the <code>_with</code> suffixed methods and\nthose methods without it, their performance characteristics, and when\nyou might or might not choose a <code>_with</code> suffixed method.</p>\n<p>For caveats specific to fallible initialization, see\n<a href=\"#fallible-initialization-the-_try_with-method-suffix\">The <code>_try_with</code> Method Suffix</a>.</p>\n<h6 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h6>\n<p>Errors with the <a href=\"%60AllocOrInitError::Alloc%60\"><code>Alloc</code></a> variant iff\nreserving space for <code>Result&lt;T, E&gt;</code> fails.</p>\n<p>Iff the allocation succeeds but <code>f</code> fails, that error is forwarded by\nvalue inside the <a href=\"%60AllocOrInitError::Init%60\"><code>Init</code></a> variant.</p>\n<h6 id=\"example-12\"><a class=\"doc-anchor\" href=\"#example-12\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::new();\n<span class=\"kw\">let </span>x = bump.try_alloc_try_with(|| <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"hello\"</span>))<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x, <span class=\"string\">\"hello\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc_slice_copy\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">alloc_slice_copy</a>&lt;T&gt;(&amp;self, src: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h4></section></summary><div class=\"docblock\"><p><code>Copy</code> a slice into this <code>Bump</code> and return an exclusive reference to\nthe copy.</p>\n<h6 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h6>\n<p>Panics if reserving space for the slice fails.</p>\n<h6 id=\"example-13\"><a class=\"doc-anchor\" href=\"#example-13\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::new();\n<span class=\"kw\">let </span>x = bump.alloc_slice_copy(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_alloc_slice_copy\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_alloc_slice_copy</a>&lt;T&gt;(&amp;self, src: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, AllocErr&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h4></section></summary><div class=\"docblock\"><p>Like <code>alloc_slice_copy</code>, but does not panic in case of allocation failure.</p>\n<h6 id=\"example-14\"><a class=\"doc-anchor\" href=\"#example-14\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::new();\n<span class=\"kw\">let </span>x = bump.try_alloc_slice_copy(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;mut</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] <span class=\"kw\">as </span><span class=\"kw-2\">&amp;mut </span>[<span class=\"kw\">_</span>]));\n\n\n<span class=\"kw\">let </span>bump = bumpalo::Bump::new();\nbump.set_allocation_limit(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"kw\">let </span>x = bump.try_alloc_slice_copy(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Err</span>(bumpalo::AllocErr)); <span class=\"comment\">// too big</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc_slice_clone\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">alloc_slice_clone</a>&lt;T&gt;(&amp;self, src: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p><code>Clone</code> a slice into this <code>Bump</code> and return an exclusive reference to\nthe clone. Prefer <a href=\"#method.alloc_slice_copy\"><code>alloc_slice_copy</code></a> if <code>T</code> is <code>Copy</code>.</p>\n<h6 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h6>\n<p>Panics if reserving space for the slice fails.</p>\n<h6 id=\"example-15\"><a class=\"doc-anchor\" href=\"#example-15\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[derive(Clone, Debug, Eq, PartialEq)]\n</span><span class=\"kw\">struct </span>Sheep {\n    name: String,\n}\n\n<span class=\"kw\">let </span>originals = [\n    Sheep { name: <span class=\"string\">\"Alice\"</span>.into() },\n    Sheep { name: <span class=\"string\">\"Bob\"</span>.into() },\n    Sheep { name: <span class=\"string\">\"Cathy\"</span>.into() },\n];\n\n<span class=\"kw\">let </span>bump = bumpalo::Bump::new();\n<span class=\"kw\">let </span>clones = bump.alloc_slice_clone(<span class=\"kw-2\">&amp;</span>originals);\n<span class=\"macro\">assert_eq!</span>(originals, clones);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_alloc_slice_clone\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_alloc_slice_clone</a>&lt;T&gt;(&amp;self, src: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, AllocErr&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Like <code>alloc_slice_clone</code> but does not panic on failure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc_str\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">alloc_str</a>(&amp;self, src: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p><code>Copy</code> a string slice into this <code>Bump</code> and return an exclusive reference to it.</p>\n<h6 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h6>\n<p>Panics if reserving space for the string fails.</p>\n<h6 id=\"example-16\"><a class=\"doc-anchor\" href=\"#example-16\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::new();\n<span class=\"kw\">let </span>hello = bump.alloc_str(<span class=\"string\">\"hello world\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello world\"</span>, hello);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_alloc_str\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_alloc_str</a>(&amp;self, src: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>, AllocErr&gt;</h4></section></summary><div class=\"docblock\"><p>Same as <code>alloc_str</code> but does not panic on failure.</p>\n<h6 id=\"example-17\"><a class=\"doc-anchor\" href=\"#example-17\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::new();\n<span class=\"kw\">let </span>hello = bump.try_alloc_str(<span class=\"string\">\"hello world\"</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello world\"</span>, hello);\n\n\n<span class=\"kw\">let </span>bump = bumpalo::Bump::new();\nbump.set_allocation_limit(<span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>hello = bump.try_alloc_str(<span class=\"string\">\"hello world\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Err</span>(bumpalo::AllocErr), hello);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc_slice_fill_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">alloc_slice_fill_with</a>&lt;T, F&gt;(&amp;self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, f: F) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Allocates a new slice of size <code>len</code> into this <code>Bump</code> and returns an\nexclusive reference to the copy.</p>\n<p>The elements of the slice are initialized using the supplied closure.\nThe closure argument is the position in the slice.</p>\n<h6 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h6>\n<p>Panics if reserving space for the slice fails.</p>\n<h6 id=\"example-18\"><a class=\"doc-anchor\" href=\"#example-18\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::new();\n<span class=\"kw\">let </span>x = bump.alloc_slice_fill_with(<span class=\"number\">5</span>, |i| <span class=\"number\">5 </span>* (i + <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>, <span class=\"number\">25</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_alloc_slice_fill_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_alloc_slice_fill_with</a>&lt;T, F&gt;(\n    &amp;self,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, AllocErr&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Allocates a new slice of size <code>len</code> into this <code>Bump</code> and returns an\nexclusive reference to the copy.</p>\n<p>The elements of the slice are initialized using the supplied closure.\nThe closure argument is the position in the slice.</p>\n<h6 id=\"example-19\"><a class=\"doc-anchor\" href=\"#example-19\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::new();\n<span class=\"kw\">let </span>x = bump.try_alloc_slice_fill_with(<span class=\"number\">5</span>, |i| <span class=\"number\">5 </span>* (i + <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;mut</span>[<span class=\"number\">5usize</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>, <span class=\"number\">25</span>] <span class=\"kw\">as </span><span class=\"kw-2\">&amp;mut </span>[<span class=\"kw\">_</span>]));\n\n\n<span class=\"kw\">let </span>bump = bumpalo::Bump::new();\nbump.set_allocation_limit(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"kw\">let </span>x = bump.try_alloc_slice_fill_with(<span class=\"number\">10</span>, |i| <span class=\"number\">5 </span>* (i + <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Err</span>(bumpalo::AllocErr));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc_slice_fill_copy\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">alloc_slice_fill_copy</a>&lt;T&gt;(&amp;self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, value: T) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h4></section></summary><div class=\"docblock\"><p>Allocates a new slice of size <code>len</code> into this <code>Bump</code> and returns an\nexclusive reference to the copy.</p>\n<p>All elements of the slice are initialized to <code>value</code>.</p>\n<h6 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h6>\n<p>Panics if reserving space for the slice fails.</p>\n<h6 id=\"example-20\"><a class=\"doc-anchor\" href=\"#example-20\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::new();\n<span class=\"kw\">let </span>x = bump.alloc_slice_fill_copy(<span class=\"number\">5</span>, <span class=\"number\">42</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_alloc_slice_fill_copy\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_alloc_slice_fill_copy</a>&lt;T&gt;(\n    &amp;self,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    value: T,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, AllocErr&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h4></section></summary><div class=\"docblock\"><p>Same as <code>alloc_slice_fill_copy</code> but does not panic on failure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc_slice_fill_clone\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">alloc_slice_fill_clone</a>&lt;T&gt;(&amp;self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Allocates a new slice of size <code>len</code> slice into this <code>Bump</code> and return an\nexclusive reference to the copy.</p>\n<p>All elements of the slice are initialized to <code>value.clone()</code>.</p>\n<h6 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h6>\n<p>Panics if reserving space for the slice fails.</p>\n<h6 id=\"example-21\"><a class=\"doc-anchor\" href=\"#example-21\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::new();\n<span class=\"kw\">let </span>s: String = <span class=\"string\">\"Hello Bump!\"</span>.to_string();\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[String] = bump.alloc_slice_fill_clone(<span class=\"number\">2</span>, <span class=\"kw-2\">&amp;</span>s);\n<span class=\"macro\">assert_eq!</span>(x.len(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>x[<span class=\"number\">0</span>], <span class=\"kw-2\">&amp;</span>s);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>x[<span class=\"number\">1</span>], <span class=\"kw-2\">&amp;</span>s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_alloc_slice_fill_clone\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_alloc_slice_fill_clone</a>&lt;T&gt;(\n    &amp;self,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, AllocErr&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Like <code>alloc_slice_fill_clone</code> but does not panic on failure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc_slice_fill_iter\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">alloc_slice_fill_iter</a>&lt;T, I&gt;(&amp;self, iter: I) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,\n    &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/exact_size/trait.ExactSizeIterator.html\" title=\"trait core::iter::traits::exact_size::ExactSizeIterator\">ExactSizeIterator</a>,</div></h4></section></summary><div class=\"docblock\"><p>Allocates a new slice of size <code>len</code> slice into this <code>Bump</code> and return an\nexclusive reference to the copy.</p>\n<p>The elements are initialized using the supplied iterator.</p>\n<h6 id=\"panics-9\"><a class=\"doc-anchor\" href=\"#panics-9\">§</a>Panics</h6>\n<p>Panics if reserving space for the slice fails, or if the supplied\niterator returns fewer elements than it promised.</p>\n<h6 id=\"example-22\"><a class=\"doc-anchor\" href=\"#example-22\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::new();\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[i32] = bump.alloc_slice_fill_iter([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>].iter().cloned().map(|i| i * i));\n<span class=\"macro\">assert_eq!</span>(x, [<span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">25</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_alloc_slice_fill_iter\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_alloc_slice_fill_iter</a>&lt;T, I&gt;(\n    &amp;self,\n    iter: I,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, AllocErr&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,\n    &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/exact_size/trait.ExactSizeIterator.html\" title=\"trait core::iter::traits::exact_size::ExactSizeIterator\">ExactSizeIterator</a>,</div></h4></section></summary><div class=\"docblock\"><p>Allocates a new slice of size <code>iter.len()</code> slice into this <code>Bump</code> and return an\nexclusive reference to the copy. Does not panic on failure.</p>\n<p>The elements are initialized using the supplied iterator.</p>\n<h6 id=\"example-23\"><a class=\"doc-anchor\" href=\"#example-23\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::new();\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[i32] = bump.try_alloc_slice_fill_iter([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]\n    .iter().cloned().map(|i| i * i)).unwrap();\n<span class=\"macro\">assert_eq!</span>(x, [<span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">25</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc_slice_fill_default\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">alloc_slice_fill_default</a>&lt;T&gt;(&amp;self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Allocates a new slice of size <code>len</code> slice into this <code>Bump</code> and return an\nexclusive reference to the copy.</p>\n<p>All elements of the slice are initialized to <a href=\"https://doc.rust-lang.org/std/default/trait.Default.html#tymethod.default\"><code>T::default()</code></a>.</p>\n<h6 id=\"panics-10\"><a class=\"doc-anchor\" href=\"#panics-10\">§</a>Panics</h6>\n<p>Panics if reserving space for the slice fails.</p>\n<h6 id=\"example-24\"><a class=\"doc-anchor\" href=\"#example-24\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::new();\n<span class=\"kw\">let </span>x = bump.alloc_slice_fill_default::&lt;u32&gt;(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_alloc_slice_fill_default\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_alloc_slice_fill_default</a>&lt;T&gt;(\n    &amp;self,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, AllocErr&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Like <code>alloc_slice_fill_default</code> but does not panic on failure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc_layout\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">alloc_layout</a>(&amp;self, layout: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/alloc/layout/struct.Layout.html\" title=\"struct core::alloc::layout::Layout\">Layout</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate space for an object with the given <code>Layout</code>.</p>\n<p>The returned pointer points at uninitialized memory, and should be\ninitialized with\n<a href=\"https://doc.rust-lang.org/std/ptr/fn.write.html\"><code>std::ptr::write</code></a>.</p>\n<h5 id=\"panics-11\"><a class=\"doc-anchor\" href=\"#panics-11\">§</a>Panics</h5>\n<p>Panics if reserving space matching <code>layout</code> fails.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_alloc_layout\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_alloc_layout</a>(&amp;self, layout: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/alloc/layout/struct.Layout.html\" title=\"struct core::alloc::layout::Layout\">Layout</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, AllocErr&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to allocate space for an object with the given <code>Layout</code> or else returns\nan <code>Err</code>.</p>\n<p>The returned pointer points at uninitialized memory, and should be\ninitialized with\n<a href=\"https://doc.rust-lang.org/std/ptr/fn.write.html\"><code>std::ptr::write</code></a>.</p>\n<h5 id=\"errors-4\"><a class=\"doc-anchor\" href=\"#errors-4\">§</a>Errors</h5>\n<p>Errors if reserving space matching <code>layout</code> fails.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chunk_capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">chunk_capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Gets the remaining capacity in the current chunk (in bytes).</p>\n<h6 id=\"example-25\"><a class=\"doc-anchor\" href=\"#example-25\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bumpalo::Bump;\n\n<span class=\"kw\">let </span>bump = Bump::with_capacity(<span class=\"number\">100</span>);\n\n<span class=\"kw\">let </span>capacity = bump.chunk_capacity();\n<span class=\"macro\">assert!</span>(capacity &gt;= <span class=\"number\">100</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_allocated_chunks\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">iter_allocated_chunks</a>(&amp;mut self) -&gt; ChunkIter&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over each chunk of allocated memory that\nthis arena has bump allocated into.</p>\n<p>The chunks are returned ordered by allocation time, with the most\nrecently allocated chunk being returned first, and the least recently\nallocated chunk being returned last.</p>\n<p>The values inside each chunk are also ordered by allocation time, with\nthe most recent allocation being earlier in the slice, and the least\nrecent allocation being towards the end of the slice.</p>\n<h6 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h6>\n<p>Because this method takes <code>&amp;mut self</code>, we know that the bump arena\nreference is unique and therefore there aren’t any active references to\nany of the objects we’ve allocated in it either. This potential aliasing\nof exclusive references is one common footgun for unsafe code that we\ndon’t need to worry about here.</p>\n<p>However, there could be regions of uninitialized memory used as padding\nbetween allocations, which is why this iterator has items of type\n<code>[MaybeUninit&lt;u8&gt;]</code>, instead of simply <code>[u8]</code>.</p>\n<p>The only way to guarantee that there is no padding between allocations\nor within allocated objects is if all of these properties hold:</p>\n<ol>\n<li>Every object allocated in this arena has the same alignment,\nand that alignment is at most 16.</li>\n<li>Every object’s size is a multiple of its alignment.</li>\n<li>None of the objects allocated in this arena contain any internal\npadding.</li>\n</ol>\n<p>If you want to use this <code>iter_allocated_chunks</code> method, it is <em>your</em>\nresponsibility to ensure that these properties hold before calling\n<code>MaybeUninit::assume_init</code> or otherwise reading the returned values.</p>\n<p>Finally, you must also ensure that any values allocated into the bump\narena have not had their <code>Drop</code> implementations called on them,\ne.g. after dropping a [<code>bumpalo::boxed::Box&lt;T&gt;</code>][crate::boxed::Box].</p>\n<h6 id=\"example-26\"><a class=\"doc-anchor\" href=\"#example-26\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bump = bumpalo::Bump::new();\n\n<span class=\"comment\">// Allocate a bunch of `i32`s in this bump arena, potentially causing\n// additional memory chunks to be reserved.\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10000 </span>{\n    bump.alloc(i);\n}\n\n<span class=\"comment\">// Iterate over each chunk we've bump allocated into. This is safe\n// because we have only allocated `i32`s in this arena, which fulfills\n// the above requirements.\n</span><span class=\"kw\">for </span>ch <span class=\"kw\">in </span>bump.iter_allocated_chunks() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Used a chunk that is {} bytes long\"</span>, ch.len());\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"The first byte is {:?}\"</span>, <span class=\"kw\">unsafe </span>{\n        ch[<span class=\"number\">0</span>].assume_init()\n    });\n}\n\n<span class=\"comment\">// Within a chunk, allocations are ordered from most recent to least\n// recent. If we allocated 'a', then 'b', then 'c', when we iterate\n// through the chunk's data, we get them in the order 'c', then 'b',\n// then 'a'.\n\n</span>bump.reset();\nbump.alloc(<span class=\"string\">b'a'</span>);\nbump.alloc(<span class=\"string\">b'b'</span>);\nbump.alloc(<span class=\"string\">b'c'</span>);\n\n<span class=\"macro\">assert_eq!</span>(bump.iter_allocated_chunks().count(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>chunk = bump.iter_allocated_chunks().nth(<span class=\"number\">0</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(chunk.len(), <span class=\"number\">3</span>);\n\n<span class=\"comment\">// Safe because we've only allocated `u8`s in this arena, which\n// fulfills the above requirements.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(chunk[<span class=\"number\">0</span>].assume_init(), <span class=\"string\">b'c'</span>);\n    <span class=\"macro\">assert_eq!</span>(chunk[<span class=\"number\">1</span>].assume_init(), <span class=\"string\">b'b'</span>);\n    <span class=\"macro\">assert_eq!</span>(chunk[<span class=\"number\">2</span>].assume_init(), <span class=\"string\">b'a'</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_allocated_chunks_raw\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">iter_allocated_chunks_raw</a>(&amp;self) -&gt; ChunkRawIter&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over raw pointers to chunks of allocated memory that\nthis arena has bump allocated into.</p>\n<p>This is an unsafe version of <a href=\"Bump::iter_allocated_chunks\"><code>iter_allocated_chunks()</code></a>,\nwith the caller responsible for safe usage of the returned pointers as\nwell as ensuring that the iterator is not invalidated by new\nallocations.</p>\n<h6 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h6>\n<p>Allocations from this arena must not be performed while the returned\niterator is alive. If reading the chunk data (or casting to a reference)\nthe caller must ensure that there exist no mutable references to\npreviously allocated data.</p>\n<p>In addition, all of the caveats when reading the chunk data from\n<a href=\"Bump::iter_allocated_chunks\"><code>iter_allocated_chunks()</code></a> still apply.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocated_bytes\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">allocated_bytes</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Calculates the number of bytes currently allocated across all chunks in\nthis bump arena.</p>\n<p>If you allocate types of different alignments or types with\nlarger-than-typical alignment in the same arena, some padding\nbytes might get allocated in the bump arena. Note that those padding\nbytes will add to this method’s resulting sum, so you cannot rely\non it only counting the sum of the sizes of the things\nyou’ve allocated in the arena.</p>\n<p>The allocated bytes do not include the size of bumpalo’s metadata,\nso the amount of memory requested from the Rust allocator is higher\nthan the returned value.</p>\n<h6 id=\"example-27\"><a class=\"doc-anchor\" href=\"#example-27\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bump = bumpalo::Bump::new();\n<span class=\"kw\">let </span>_x = bump.alloc_slice_fill_default::&lt;u32&gt;(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>bytes = bump.allocated_bytes();\n<span class=\"macro\">assert!</span>(bytes &gt;= core::mem::size_of::&lt;u32&gt;() * <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocated_bytes_including_metadata\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">allocated_bytes_including_metadata</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Calculates the number of bytes requested from the Rust allocator for this <code>Bump</code>.</p>\n<p>This number is equal to the <a href=\"Self::allocated_bytes\"><code>allocated_bytes()</code></a> plus\nthe size of the bump metadata.</p>\n</div></details></div></details>",0,"flux_middle::fhir::Arena"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Bump\" class=\"impl\"><a href=\"#impl-Debug-for-Bump\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Bump</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","flux_middle::fhir::Arena"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Bump\" class=\"impl\"><a href=\"#impl-Default-for-Bump\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for Bump</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Bump</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","flux_middle::fhir::Arena"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Bump\" class=\"impl\"><a href=\"#impl-Drop-for-Bump\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for Bump</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","flux_middle::fhir::Arena"],["<section id=\"impl-Send-for-Bump\" class=\"impl\"><a href=\"#impl-Send-for-Bump\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for Bump</h3></section>","Send","flux_middle::fhir::Arena"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[61259]}
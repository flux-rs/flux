searchState.loadedDescShard("flux_common", 0, "This file contains functions and macros to log debugging …\nThis module allows storing mir bodies with borrowck facts …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents some newtyped <code>usize</code> wrapper.\nA generator of fresh indices.\nAn owned contiguous collection of <code>T</code>s, indexed by <code>I</code> rather …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nGrows the index vector so that it contains an entry for …\nGenerate a fresh index of type <code>I</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new vector with a copy of <code>elem</code> for each index in …\nCreates a new IndexVec with n copies of the <code>elem</code>.\nCreate an <code>IndexVec</code> with <code>n</code> elements, where the value of each\nConstructs a new <code>IndexVec&lt;I, T&gt;</code> from a <code>Vec&lt;T&gt;</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new, empty <code>IndexVec&lt;I, T&gt;</code>.\nPushes an element to the array returning the index where …\nSkip <code>n</code> indices\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nSafety")
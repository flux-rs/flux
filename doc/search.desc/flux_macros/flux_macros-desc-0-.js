searchState.loadedDescShard("flux_macros", 0, "The central struct for constructing the <code>into_diag</code> method …\nThe central struct for constructing the <code>decorate_lint</code> …\nChecks whether the slug starts with the crate name it’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a <code>#[test]</code> that verifies that all referenced …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat kind of diagnostic is being derived - a …\nTracks persistent information required for a specific …\nAdds a spanned subdiagnostic by generating a …\nAdds a subdiagnostic by generating a <code>diag.span_$kind</code> call …\nGenerates calls to <code>span_label</code> and similar functions based …\nError codes are a optional part of the struct attribute - …\nCall <code>f</code> for the struct or for each variant of the enum, …\nStore a map of field name to its corresponding field. This …\nInitialization of format strings for code suggestions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEstablishes state in the <code>DiagnosticDeriveBuilder</code> resulting …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind for the entire type.\nParse a <code>SubdiagnosticKind</code> from an <code>Attribute</code>.\nGenerates calls to <code>code</code> and similar functions based on the …\nSlug is a mandatory part of the struct attribute as …\nSpan of the struct or the enum variant.\nHelper function for use with <code>throw_*</code> macros - constraints …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns an error diagnostic for an invalid attribute.\nHelper function for printing <code>syn::Path</code> - doesn’t handle …\nReturns an error diagnostic on span <code>span</code> with msg <code>msg</code>.\nEmit an error diagnostic for an invalid attribute …\nEmit a diagnostic on span <code>$span</code> with msg <code>$msg</code> (optionally …\nTokens to be returned when the macro cannot proceed.\nFinal tokens.\nSee <code>crate::fluent_messages!</code>.\nHelper function for returning an absolute path for …\nProvides frequently-needed information about the …\nThe central struct for constructing the <code>add_to_diag</code> method …\nTracks persistent information required for building up the …\nThe binding to the <code>#[applicability]</code> field, if present.\nStore a map of field name to its corresponding field. This …\nInitialization of format strings for code suggestions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates the code for a field with no attributes.\nGenerates the necessary code for all attributes on a field.\nGenerates the code for a <code>[Meta::List]</code>-like attribute on a …\nGenerates the code for a <code>[Meta::Path]</code>-like attribute on a …\nSet to true when a <code>#[subdiagnostic]</code> field is encountered, …\nSet to true when a <code>#[suggestion_part]</code> field is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet to true when this variant is an enum variant rather …\nThe identifier to use for the generated <code>Diag</code> instance.\nSpan for the entire type.\nIdentifier for the binding to the <code>#[primary_span]</code> field.\nInfo for the current variant (or the type if not an enum).\n<code>Applicability</code> of a suggestion - mirrors …\nField information passed to the builder. Deliberately …\nInner type of a field and type of wrapper.\n<code>#[help(...)]</code>\n<code>#[help_once(...)]</code>\n<code>#[label(...)]</code>\n<code>#[multipart_suggestion{,_short,_hidden,_verbose}]</code>\nNo value.\n<code>#[note(...)]</code>\n<code>#[note_once(...)]</code>\nField is wrapped in a <code>Option&lt;$inner&gt;</code>.\nField isn’t wrapped in an outer type.\nSmall helper trait for abstracting over <code>Option</code> fields that …\nSome value of type <code>T</code>.\nAn <code>Option&lt;T&gt;</code> that keeps track of the span that caused it …\nTypes of subdiagnostics that can be created using …\n<code>#[suggestion{,_short,_hidden,_verbose}]</code>\nPossible styles for suggestion subdiagnostics.\nField is wrapped in a <code>Vec&lt;$inner&gt;</code>.\n<code>#[warning(...)]</code>\nBuild the mapping of field names to fields. This allows …\nIn the strings in the attributes supplied to this macro, …\nConstructs the <code>format!()</code> invocation(s) necessary for a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>SubdiagnosticVariant</code> from a field or type …\nReturns inner type for a field, if there is one.\nReturns the binding for the field with the given name, if …\nReturns the inner type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an ident of the form <code>__code_N</code> where <code>N</code> is …\nReports an error if the field’s type is not <code>Applicability</code>…\nReports an error if the field’s type is not <code>Span</code>.\nReports an error if the field’s type does not match <code>path</code>.\nReports a type error for field with <code>attr</code>.\nReturns <code>true</code> if <code>field</code> should generate a <code>arg</code> call rather …\nChecks whether the type <code>ty</code> is <code>bool</code>.\nChecks whether the type <code>ty</code> is <code>()</code>.\nChecks whether the type name of <code>ty</code> matches <code>name</code>.\nReturns <code>true</code> if <code>FieldInnerTy::with</code> will result in …\nSurrounds <code>inner</code> with destructured wrapper type, exposing …\nIdentifier for variable used for formatted code, e.g. …\nInitialization logic for <code>code_field</code>’s variable, e.g. …\nAn arg of the form <code>a: T</code>\nCheck that the number of arguments is the same in all rules\nGenerates the code that checks if an arg matching a …\nDeclare metavars as variables so they can be accessed in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates the code that checks that all the inputs …\nThe set of metavars and the index of the inputs they match\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")
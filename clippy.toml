disallowed-methods = [
    { path = "rustc_span::def_id::DefId::is_local", reason = "treating a `DefId` as a `LocalDefId` is typically wrong because it doesn't consider that the `DefId` may correspond to a local extern spec. Use `MaybeExternId` or `ResolvedDefId` if possible" },
    { path = "rustc_span::def_id::DefId::expect_local", reason = "treating a `DefId` as a `LocalDefId` is typically wrong because it doesn't consider that the `DefId` may correspond to a local extern spec. Use `MaybeExternId` or `ResolvedDefId` if possible" },
    { path = "rustc_span::def_id::DefId::as_local", reason = "treating a `DefId` as a `LocalDefId` is typically wrong because it doesn't consider that the `DefId` may correspond to a local extern spec. Use `MaybeExternId` or `ResolvedDefId` if possible" },
    { path = "flux_fhir_analysis::variants_of", reason = "method should be called through query" },
    { path = "flux_fhir_analysis::spec_func_defns", reason = "method should be called through query" },
    { path = "flux_fhir_analysis::spec_func_decl", reason = "method should be called through query" },
    { path = "flux_fhir_analysis::qualifiers", reason = "method should be called through query" },
    { path = "flux_fhir_analysis::adt_sort_def_of", reason = "method should be called through query" },
    { path = "flux_fhir_analysis::check_wf", reason = "method should be called through query" },
    { path = "flux_fhir_analysis::adt_def", reason = "method should be called through query" },
    { path = "flux_fhir_analysis::type_of", reason = "method should be called through query" },
    { path = "flux_fhir_analysis::variants_of", reason = "method should be called through query" },
    { path = "flux_fhir_analysis::fn_sig", reason = "method should be called through query" },
    { path = "flux_fhir_analysis::generics_of", reason = "method should be called through query" },
    { path = "flux_fhir_analysis::refinement_generics_of", reason = "method should be called through query" },
    { path = "flux_fhir_analysis::predicates_of", reason = "method should be called through query" },
    { path = "flux_fhir_analysis::assoc_refinements_of", reason = "method should be called through query" },
    { path = "flux_fhir_analysis::sort_of_assoc_reft", reason = "method should be called through query" },
    { path = "flux_fhir_analysis::assoc_refinement_def", reason = "method should be called through query" },
    { path = "flux_fhir_analysis::default_assoc_refinement_def", reason = "method should be called through query" },
    { path = "flux_fhir_analysis::item_bounds", reason = "method should be called through query" },
    { path = "flux_middle::rty::AssocReftId::new", reason = "you should only call create an `AssocReftId` if you can guarantee that the associated refinement exists" },
]

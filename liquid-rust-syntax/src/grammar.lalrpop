use crate::{
    UserParseError,
    ast,
    lexer::{Lit, Location, Token, DelimToken, BinOpToken}
};
use rustc_span::{Span, Symbol};
use lalrpop_util::ParseError;

grammar<F>(mk_span: &F) where F: Fn(Location, Location) -> Span;

pub FnSig: ast::FnSig = {
    "ident" <params:Params?> "(" <args:Comma<Ty>> ")" "->" <ret:Ty> => {
        let params = params.unwrap_or_else(|| vec![]);
        ast::FnSig { <> }
    }
}

Ty: ast::Ty = {
    <lo:@L> <kind:TyKind> <hi:@L> => ast::Ty {
        kind,
        span: mk_span(lo, hi)
    }
}

TyKind: ast::TyKind = {
    <refine:Refine> "@" <bty:Ident>                  => ast::TyKind::RefineTy { <> },
    <bty:Ident> "{" <bind:Ident> ":" <pred:Expr> "}" => ast::TyKind::Exists { <> }
}

Refine: ast::Refine = {
    <lit:Lit>     => ast::Refine::Literal(lit),
    <ident:Ident> => ast::Refine::Var(ident),
}

Params: Vec<ast::Param> = {
    "<" <Comma<Param>> ">"
}

Param: ast::Param = {
    <name:Ident> ":" "{" <sort:Ident> "|" <pred:Expr> "}" => ast::Param { name, sort, pred: Some(pred) },
    <name:Ident> ":" <sort:Ident>                         => ast::Param { name, sort, pred: None },
}

Expr = Level<BinOp1, Level2>;
Level2 = Level<BinOp2, Level3>;
Level3: ast::Expr = {
    <lo:@L> <e1:Level4> <op:BinOp3> <e2:Level4> <hi:@R> => ast::Expr {
        kind: ast::ExprKind::BinaryOp(op, Box::new(e1), Box::new(e2)),
        span: mk_span(lo, hi)
    },
    Level4
}
Level4 = Level<BinOp4, Level5>;
Level5: ast::Expr = {
    <lo:@L> <lit:Lit> <hi:@R> => {
        ast::Expr {
            kind: ast::ExprKind::Literal(lit),
            span: mk_span(lo, hi),
        }
    },
    <lo:@L> <var:Ident> <hi:@R> => ast::Expr {
        kind: ast::ExprKind::Var(var),
        span: mk_span(lo, hi),
    },
    "(" <expr: Expr> ")" => <>
}


Level<Op, NextLevel>: ast::Expr = {
    <lo:@L> <e1:Level<Op, NextLevel>> <op:Op> <e2:NextLevel> <hi:@R> =>
        ast::Expr {
            kind: ast::ExprKind::BinaryOp(
                op,
                Box::new(e1),
                Box::new(e2)
            ),
            span: mk_span(lo, hi),
        },
    NextLevel
}

BinOp1: ast::BinOp = {
    "||" => ast::BinOp::Or,
}

BinOp2: ast::BinOp = {
    "&&" => ast::BinOp::And,
}

BinOp3: ast::BinOp = {
    "==" => ast::BinOp::Eq,
    ">" => ast::BinOp::Gt,
    ">=" => ast::BinOp::Ge,
    "<" => ast::BinOp::Lt,
    "<=" => ast::BinOp::Le,
}

BinOp4: ast::BinOp = {
    "+" => ast::BinOp::Add
}

Lit: ast::Lit = {
    <lo:@L> <lit:"literal"> <hi:@R> => ast::Lit {
        kind: lit.kind,
        span: mk_span(lo, hi),
        symbol: lit.symbol
    },
}


Ident: ast::Ident = {
    <lo:@L> <ident:"ident"> <hi:@R> => {
        ast::Ident { symbol: ident, span: mk_span(lo, hi) }
    }
}

Sep<S, T>: Vec<T> = {
    <v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}
Comma<T> = Sep<",", T>;
Binding<A, B>: (A, B) = <A> ":" <B>;

extern {
    type Location = Location;
    type Error = UserParseError;

    enum Token {
        "literal" => Token::Literal(<Lit>),
        "ident"   => Token::Ident(<Symbol>),
        "fn" => Token::Fn,
        "@"  => Token::At,
        "==" => Token::EqEq,
        "&&" => Token::AndAnd,
        "||" => Token::OrOr,
        "+"  => Token::Plus,
        "|"  => Token::Caret,
        "("  => Token::OpenDelim(DelimToken::Paren),
        ")"  => Token::CloseDelim(DelimToken::Paren),
        "{"  => Token::OpenDelim(DelimToken::Brace),
        "}"  => Token::CloseDelim(DelimToken::Brace),
        "<"  => Token::Lt,
        "<="  => Token::Le,
        ">"  => Token::Gt,
        ">="  => Token::Ge,
        ":"  => Token::Colon,
        ","  => Token::Comma,
        "->" => Token::RArrow,
    }
}

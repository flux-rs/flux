use crate::{
    UserParseError,
    surface,
    lexer::{Lit, Location, Token, Delimiter, BinOpToken}
};
use rustc_span::{Span, Symbol};
use lalrpop_util::ParseError;

grammar<F>(mk_span: &F) where F: Fn(Location, Location) -> Span;

pub Alias: surface::Alias = {
  <lo:@L>
    "type"
    <name:Ident>
    <params:("(" Comma<Ident> ")")?>
    "="
    <defn:Ty>
    <hi:@R> => {
        let args = match params {
            Some(xs) => xs.1,
            None => vec![],
        };
        surface::Alias { name, args, defn, span: mk_span(lo, hi) }
    }
}

pub RefinedBy: surface::Params = {
    <lo:@L> <params:Comma<Param>> <hi:@R> => surface::Params { params, span: mk_span(lo, hi) }
}

pub UFDef: surface::UFDef = {
    <lo:@L>
    "fn"
    <name:Ident>
    "(" <inputs:Comma<Ident>> ")"
    "->"
    <output:Ident>
    <hi:@R> => {
        surface::UFDef { name, inputs, output, span: mk_span(lo, hi) }
    }
}


pub Qualifier: surface::Qualifier = {
    <lo:@L>
    <name:Ident>
    "(" <args:Comma<Param>> ")"
    ":"
    <expr:Level1>
    <hi:@R> => {
        surface::Qualifier { name: name, args: args, expr: expr, span: mk_span(lo, hi) }
    }
}

Param: surface::Param = <name: Ident> ":" <sort: Ident> => surface::Param { <> };

pub FnSig: surface::FnSig = {
    <lo:@L>
    "fn"
    "(" <args:Args> ")"
    <returns:("->" <Ty>)?>
    <requires:("requires" <Level1>)?>
    <ensures:("ensures" <Ensures>)?>
    <hi:@R>
    => {
        let ensures = ensures.unwrap_or_default();
        surface::FnSig { args, returns, ensures, requires, span: mk_span(lo, hi) }
    }
}

pub Variant: surface::VariantDef = {
    <lo:@L> <tys:Fields?> <ret:VariantRet> <hi:@R> => {
        let fields = match tys {
            Some(fields) => fields,
            None => vec![],
        };
        surface::VariantDef { fields, ret, span: mk_span(lo, hi) }
    }
}

VariantRet: surface::VariantRet = {
    <path: Path> "[" <indices: Indices> "]" => {
        surface::VariantRet {<>}
    }
}

Fields: Vec<surface::Ty> = {
    "(" <Comma<Ty>> ")" "->",
    "{" <Comma<Ty>> "}" "->",
}

Env     = <Comma<(<Ident> "@" <Ty>)>>;
Args    = <Comma<Arg>>;
Ensures = <Comma<(<Ident> ":" <Ty>)>>;


Arg: surface::Arg = {
    <bind:Ident> ":" "&" "strg" <ty:Ty>                => surface::Arg::StrgRef(bind, ty),
    <bind:Ident> ":" <path:Path>                       => surface::Arg::Constr(bind, path, None),
    <bind:Ident> ":" <path:Path> "{" <pred:Level1> "}" => surface::Arg::Constr(bind, path, Some(pred)),
    <bind:Ident> ":" <path:Path> "[" <indices:Indices> "]" => surface::Arg::Alias(bind, path, indices),
    <bind:Ident> ":" "&" "mut" <ty:Ty> => {
        let span = ty.span;
        let kind = surface::TyKind::Ref(surface::RefKind::Mut, Box::new(ty));
        let arg_ty = surface::Ty { kind, span };
        surface::Arg::Ty(arg_ty)
    },
    <ty:Ty>                                            => surface::Arg::Ty(<>),
}

pub Ty: surface::Ty = {
    <lo:@L> <kind:TyKind> <hi:@L> => surface::Ty {
        kind,
        span: mk_span(lo, hi)
    }
}

TyKind: surface::TyKind = {
    "&" "strg" "<" <loc:Ident> ":" <ty:Ty> ">"  => surface::TyKind::StrgRef(loc, Box::new(ty)),

    "&"        <ty:Ty> => surface::TyKind::Ref(surface::RefKind::Shr, Box::new(ty)),
    "&" "mut"  <ty:Ty> => surface::TyKind::Ref(surface::RefKind::Mut, Box::new(ty)),

    "{" <ty:Ty> ":" <pred:Level1> "}" => surface::TyKind::Constr(pred, Box::new(ty)),

    <path:Path>                                        => surface::TyKind::Path(<>),
    <path:Path> "{" <bind:Ident> ":" <pred:Level1> "}" => surface::TyKind::Exists { <> },
    <path:Path> "[" <indices:Indices> "]"              => surface::TyKind::Indexed { <> },

    "[" <ty:Ty> ";"  <lo:@L> <ident:Ident> <hi:@R> "]" =>? {
        if ident.name.as_str() == "_" {
            Ok(surface::TyKind::Array(Box::new(ty), surface::ArrayLen))
        } else {
            Err(ParseError::User { error: UserParseError::UnexpectedToken(lo, hi) })
        }
    },
    "[" <ty:Ty> "]" => surface::TyKind::Slice(Box::new(ty)),
    "[" <ty:Ty> "]""[" <indices:Indices> "]" => surface::TyKind::Slice(Box::new(ty)),

    "(" ")"  => surface::TyKind::Unit
}

GenericArgs: Vec<surface::Ty> = {
    "<" <Comma<Ty>> ">"
}

Path: surface::Path = {
    <lo:@L> <ident:Ident> <args:GenericArgs?> <hi:@R> => surface::Path { ident, args: args.unwrap_or_default(), span: mk_span(lo, hi) }
}

Refinement: surface::Expr = {
    <lo:@L> <lit:Lit> <hi:@R> => {
        surface::Expr {
            kind: surface::ExprKind::Literal(lit),
            span: mk_span(lo, hi),
        }
    },
    <lo:@L> <var:Ident> <hi:@R> => surface::Expr {
        kind: surface::ExprKind::Var(var),
        span: mk_span(lo, hi),
    },
    "{" <Level1> "}" => <>
};

Indices: surface::Indices = {
    <lo:@L> <indices:Comma<Index>> <hi:@R> => surface::Indices { indices, span: mk_span(lo, hi) }
};

Index: surface::Index = {
    "@" <Ident> => surface::Index::Bind(<>),
    <Level1>    => surface::Index::Expr(<>),
};

pub Expr = Level1;

Level1 = NonAssoc<BinOp1, Level2>;  // <=>
Level2 = LeftAssoc<BinOp2, Level3>; // =>
Level3 = LeftAssoc<BinOp3, Level4>; // ||
Level4 = LeftAssoc<BinOp4, Level5>; // &&
Level5 = NonAssoc<BinOp5, Level6>;  // ==, >=, <=
Level6 = LeftAssoc<BinOp6, Level7>; // +, -
Level7 = LeftAssoc<BinOp7, Level8>; // *, %
Level8: surface::Expr = {
    <lo:@L> "if" <p:Level1> "{" <e1:Level1> "}" "else" "{" <e2:Level1> "}" <hi:@R> => {
        surface::Expr {
            kind: surface::ExprKind::IfThenElse(Box::new(p), Box::new(e1), Box::new(e2)),
            span: mk_span(lo, hi),
        }
    },
    <lo:@L> <lit:Lit> <hi:@R> => {
        surface::Expr {
            kind: surface::ExprKind::Literal(lit),
            span: mk_span(lo, hi),
        }
    },
    <lo:@L> <var:Ident> "." <fld:Ident> <hi:@R> => {
        let expr  = surface::Expr { kind: surface::ExprKind::Var(var), span: var.span};
        surface::Expr {
            kind: surface::ExprKind::Dot(Box::new(expr), fld),
            span: mk_span(lo, hi),
        }
    },
    <lo:@L> <f:Ident> "(" <args:Comma<Level1>> ")" <hi:@R> => {
        surface::Expr {
            kind: surface::ExprKind::App(f, args),
            span: mk_span(lo, hi),
        }
    },


    <lo:@L> <var:Ident> <hi:@R> => surface::Expr {
        kind: surface::ExprKind::Var(var),
        span: mk_span(lo, hi),
    },
    "(" <Level1> ")" => <>
}


NonAssoc<Op, NextLevel>: surface::Expr = {
    <lo:@L> <e1:NextLevel> <op:Op> <e2:NextLevel> <hi:@R> => surface::Expr {
        kind: surface::ExprKind::BinaryOp(op, Box::new(e1), Box::new(e2)),
        span: mk_span(lo, hi)
    },
    NextLevel
}
LeftAssoc<Op, NextLevel>: surface::Expr = {
    <lo:@L> <e1:LeftAssoc<Op, NextLevel>> <op:Op> <e2:NextLevel> <hi:@R> =>
        surface::Expr {
            kind: surface::ExprKind::BinaryOp(
                op,
                Box::new(e1),
                Box::new(e2)
            ),
            span: mk_span(lo, hi),
        },
    NextLevel
}

BinOp1: surface::BinOp = {
    "<=>" => surface::BinOp::Iff
}

BinOp2: surface::BinOp = {
    "=>" => surface::BinOp::Imp
}

BinOp3: surface::BinOp = {
    "||" => surface::BinOp::Or,
}

BinOp4: surface::BinOp = {
    "&&" => surface::BinOp::And,
}

BinOp5: surface::BinOp = {
    "==" => surface::BinOp::Eq,
    ">" => surface::BinOp::Gt,
    ">=" => surface::BinOp::Ge,
    "<" => surface::BinOp::Lt,
    "<=" => surface::BinOp::Le,
}

BinOp6: surface::BinOp = {
    "+" => surface::BinOp::Add,
    "-" => surface::BinOp::Sub,
}

BinOp7: surface::BinOp = {
    "*" => surface::BinOp::Mul,
    "%" => surface::BinOp::Mod,
}

Lit: surface::Lit = {
    <lo:@L> <lit:"literal"> <hi:@R> => surface::Lit {
        kind: lit.kind,
        span: mk_span(lo, hi),
        symbol: lit.symbol
    },
}


Ident: surface::Ident = {
    <lo:@L> <name:"ident"> <hi:@R> => {
        surface::Ident { name, span: mk_span(lo, hi) }
    }
}

Sep<S, T>: Vec<T> = {
    <v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

Comma<T> = Sep<",", T>;

Binding<A, B>: (A, B) = <A> ":" <B>;

extern {
    type Location = Location;
    type Error = UserParseError;

    enum Token {
        "mut" => Token::Mut,
        "strg" => Token::Strg,
        "requires" => Token::Requires,
        "ensures" => Token::Ensures,
        "literal" => Token::Literal(<Lit>),
        "ident"   => Token::Ident(<Symbol>),
        "fn" => Token::Fn,
        "type" => Token::Type,
        "ref" => Token::Ref,
        "@"  => Token::At,
        "==" => Token::EqEq,
        "="  => Token::Eq,
        "&&" => Token::AndAnd,
        "||" => Token::OrOr,
        "=>" => Token::FatArrow,
        "<=>" => Token::Iff,
        "+"  => Token::Plus,
        "-"  => Token::Minus,
        "*"  => Token::Star,
        "|"  => Token::Caret,
        "("  => Token::OpenDelim(Delimiter::Parenthesis),
        ")"  => Token::CloseDelim(Delimiter::Parenthesis),
        "{"  => Token::OpenDelim(Delimiter::Brace),
        "}"  => Token::CloseDelim(Delimiter::Brace),
        "["  => Token::OpenDelim(Delimiter::Bracket),
        "]"  => Token::CloseDelim(Delimiter::Bracket),
        "<"  => Token::Lt,
        "<="  => Token::Le,
        ">"  => Token::Gt,
        ">="  => Token::Ge,
        ":"  => Token::Colon,
        "."  => Token::Dot,
        ";"  => Token::Semi,
        ","  => Token::Comma,
        "->" => Token::RArrow,
        "&"  => Token::And,
        "%"  => Token::Percent,
        "if"   => Token::If,
        "else" => Token::Else,
    }
}

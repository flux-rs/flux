use crate::{
    UserParseError,
    surface,
    lexer::{Lit, Location, Token, Delimiter, BinOpToken},
    ParseCtxt,
};
use rustc_span::{Span, Symbol, symbol::Ident};
use lalrpop_util::ParseError;

grammar(cx: &mut ParseCtxt<'_>);

pub YesOrNoWithReason: bool = {
    <YesOrNo>,
    <YesOrNo> "," Reason,
    Reason => true
}

Reason: Symbol = {
    <lo:@L> <ident:"ident"> <hi:@R> "=" "literal" =>? {
        if ident.as_str() == "reason" {
            Ok(ident)
        } else {
            Err(ParseError::User { error: UserParseError::UnexpectedToken(lo, hi) })
        }
    }
}

YesOrNo: bool = {
    <lo:@L> <ident:"ident"> <hi:@R> =>? {
        match ident.as_str() {
            "yes" => Ok(true),
            "no" => Ok(false),
            _ => Err(ParseError::User { error: UserParseError::UnexpectedToken(lo, hi) })
        }
    }
}

pub Generics: surface::Generics = {
    <lo:@L> <params:Comma<GenericParam>> <hi:@R> => {
        surface::Generics {
            params,
            predicates: None,
            span: cx.map_span(lo, hi),
        }
    }
}

GenericsWithAngleBrackets: surface::Generics = {
    "<" <Generics> ">" => <>,
    <lo:@L> <hi:@R> => {
        surface::Generics {
            params: vec![],
            predicates: None,
            span: cx.map_span(lo, hi),
        }
    }
}

GenericParam: surface::GenericParam = {
    <name:Ident> => surface::GenericParam {
        name,
        kind: surface::GenericParamKind::Type,
        node_id: cx.next_node_id(),
    },
    <name:Ident> "as" <lo:@L> <kind:Ident> <hi:@R> =>? {
        let kind = match kind.as_str() {
            "type" => surface::GenericParamKind::Type,
            "base" => surface::GenericParamKind::Base,
            _ => return Err(ParseError::User { error: UserParseError::UnexpectedToken(lo, hi) })
        };
        Ok(surface::GenericParam { name, kind, node_id: cx.next_node_id() })
    },
}

pub TyAlias: surface::TyAlias = {
    <lo:@L>
    "type"
    <ident:Ident>
    <mut generics:GenericsWithAngleBrackets>
    <params:("(" <RefineParams<"!">> ")")?>
    <index:("[" <RefineParam<"!">> "]")?>
    "="
    <ty:Ty>
    <hi:@R> => {
        surface::TyAlias {
            ident,
            generics,
            params: params.unwrap_or_default(),
            index,
            ty,
            node_id: cx.next_node_id(),
            span: cx.map_span(lo, hi)
        }
    }
}

pub RefinedBy = RefineParams<"!">;

pub Items: Vec<surface::Item> = {
    (<Item>)*
}

Item: surface::Item = {
    <Qualifier> => surface::Item::Qualifier(<>),
    <SpecFunc>  => surface::Item::FuncDef(<>),
    <SortDecl>  => surface::Item::SortDecl(<>),
}

Qualifier: surface::Qualifier = {
    <lo:@L>
    <local: ("local")?>
    "qualifier"
    <name:Ident>
    "(" <params:RefineParams<"!">> ")" "{" <expr:Expr> "}"
    <hi:@R> =>? {
        let global = local.is_none();
        Ok(surface::Qualifier {
            name,
            params,
            expr,
            global,
            span: cx.map_span(lo, hi),
        })
    }
}

SpecFunc: surface::SpecFunc = {
    "fn" <name:Ident> <vars:SortVars?> "(" <params:RefineParams<"!">> ")" "->" <output:Sort> "{" <body:Expr> "}" => {
        surface::SpecFunc {
            name,
            sort_vars: vars.unwrap_or_default(),
            params,
            output,
            body: Some(body),
        }
    },
    "fn" <name:Ident> <vars:SortVars?> "(" <params:RefineParams<"!">> ")" "->" <output:Sort> ";" => {
        surface::SpecFunc {
            name,
            sort_vars: vars.unwrap_or_default(),
            params,
            output,
            body: None,
        }
    }
}

SortVars: Vec<Ident> = {
    "<" <vars:Comma<Ident>> ">" => vars,
}


SortDecl: surface::SortDecl = {
    "opaque" "sort" <name:Ident> ";" => {
        surface::SortDecl { name }
    }
}

pub ConstantInfo: surface::ConstantInfo = {
    <expr:Expr> => surface::ConstantInfo { expr: Some(expr) }
}

pub QualNames: surface::QualNames = {
    <names:Comma<Ident>> => surface::QualNames { names }
}

RefineParams<T>: surface::RefineParams = <Comma<RefineParam<T>>>;

RefineParam<T>: surface::RefineParam = {
    <lo:@L> <mode:ParamMode?> <ident:Ident> ":" <sort:Sort> <hi:@R> => surface::RefineParam {
        ident,
        sort,
        mode,
        span: cx.map_span(lo, hi),
        node_id: cx.next_node_id(),
    },
    <mode:ParamMode?> <ident:Ident> if T == "?" => surface::RefineParam {
        ident,
        sort: surface::Sort::Infer,
        mode,
        span: ident.span,
        node_id: cx.next_node_id(),
    },
};

ParamMode: surface::ParamMode = {
    "hrn" => surface::ParamMode::Horn,
    "hdl" => surface::ParamMode::Hindley
}

BaseSort: surface::BaseSort = {
    "bitvec" <width: AngleBrackets<BitVecWidth>> => {
        surface::BaseSort::BitVec(width)
    },
    <segments:Sep1<"::", Ident>> <args:AngleBrackets<Comma<BaseSort>>?> => {
        let path = surface::SortPath {
            segments,
            args: args.unwrap_or_default(),
            node_id: cx.next_node_id(),
        };
        surface::BaseSort::Path(path)
    },
}

BitVecWidth: u32 = {
    <lo:@L> <lit:Lit> <hi:@R> =>? {
        if let Ok(width) = lit.symbol.as_str().parse::<u32>() {
            Ok(width)
        } else {
            Err(ParseError::User { error: UserParseError::UnexpectedToken(lo, hi) })
        }
    }
}

Sort: surface::Sort = {
    <base: BaseSort> => surface::Sort::Base(base),
    "(" <inputs:Comma<BaseSort>> ")" "->" <output:BaseSort> => surface::Sort::Func { <> },
    <input:BaseSort> "->" <output:BaseSort>                 => surface::Sort::Func { inputs: vec![input], output }
}

pub TraitAssocRefts: Vec<surface::TraitAssocReft> = TraitAssocReft*;

TraitAssocReft: surface::TraitAssocReft = {
    <lo:@L> "fn" <name:Ident> "(" <params:RefineParams<"!">> ")" "->" <output:BaseSort> ";"? <hi:@R> => {
        surface::TraitAssocReft {
            name,
            params,
            output,
            body: None,
            span: cx.map_span(lo, hi),
        }
    },
    <lo:@L> "fn" <name:Ident> "(" <params:RefineParams<"!">> ")" "->" <output:BaseSort> "{" <body:Expr> "}" <hi:@R> => {
        surface::TraitAssocReft {
            name,
            params,
            output,
            body: Some(body),
            span: cx.map_span(lo, hi),
        }
    },
}

pub ImplAssocRefts: Vec<surface::ImplAssocReft> = ImplAssocReft*;

ImplAssocReft: surface::ImplAssocReft = {
    <lo:@L> "fn" <name:Ident> "(" <params:RefineParams<"!">> ")" "->" <output:BaseSort> "{" <body:Expr> "}" <hi:@R> => {
        surface::ImplAssocReft {
            name,
            params,
            output,
            body,
            span: cx.map_span(lo, hi),
        }
    }
}

pub FnSig: surface::FnSig = {
    <lo:@L>
    <asyncness:Async>
    "fn"
    <ident:Ident?>
    <mut generics:GenericsWithAngleBrackets>
    <params:("["<RefineParams<"!">>"]")?>
    "(" <inputs:FnInputs> ")"
    <ret_lo:@L> <ret_hi:@R>
    <returns:("->" <Ty>)?>
    <requires:("requires" <Comma1<Requires>>)?>
    <ensures:("ensures" <Comma1<Ensures>>)?>
    <predicates:("where" <Predicates>)?>
    <hi:@R>
    => {
        let returns = if let Some(ty) = returns {
            surface::FnRetTy::Ty(ty)
        } else {
            surface::FnRetTy::Default(cx.map_span(ret_lo, ret_hi))
        };
        generics.predicates = predicates;
        let output = surface::FnOutput {
            returns,
            ensures: ensures.unwrap_or_default(),
            node_id: cx.next_node_id(),
        };
        surface::FnSig {
            asyncness,
            ident,
            generics,
            params: params.unwrap_or_default(),
            inputs,
            requires: requires.unwrap_or_default(),
            output,
            span: cx.map_span(lo, hi),
            node_id: cx.next_node_id(),
        }
    },

}

Async: surface::Async = {
    <lo:@L> <asyncness:"async"?> <hi:@R> => {
        if asyncness.is_some() {
            surface::Async::Yes { node_id: cx.next_node_id(), span: cx.map_span(lo, hi) }
        } else {
            surface::Async::No
        }
    }

}

pub Variant: surface::VariantDef = {
    <lo:@L> <fields:Fields> "->" <ret:VariantRet> <hi:@R> => {
        surface::VariantDef {
            fields,
            ret: Some(ret),
            node_id: cx.next_node_id(),
            span: cx.map_span(lo, hi),
        }
    },
    <lo:@L> <fields:Fields> <hi:@R> => {
        surface::VariantDef {
            fields,
            ret: None,
            node_id: cx.next_node_id(),
            span: cx.map_span(lo, hi),
        }
    },
    <lo:@L> <ret:VariantRet?> <hi:@R> => {
        surface::VariantDef {
            fields: vec![],
            ret,
            node_id: cx.next_node_id(),
            span: cx.map_span(lo, hi),
        }
    }
}

VariantRet: surface::VariantRet = {
    <path:Path> "[" <indices: Indices> "]" => {
        surface::VariantRet { <> }
    },
    <path:Path> <lo:@L> <hi:@R> => {
        let indices = surface::Indices { indices: vec![], span: cx.map_span(lo, hi) };
        surface::VariantRet { path, indices }
    }
}

Fields: Vec<surface::Ty> = {
    "(" <Comma<Ty>> ")",
    "{" <Comma<Ty>> "}",
}

FnInputs = <Comma<FnInput>>;
Predicates = <Comma<WhereBoundPredicate>>;

Requires: surface::Requires = {
    <params: ("forall" <RefineParams<"?">> ".")?> <pred:Expr> => {
        surface::Requires {
            params: params.unwrap_or_default(),
            pred,
        }
    }
}

Ensures: surface::Ensures = {
    <ident:Ident> ":" <ty:Ty> => surface::Ensures::Type(ident, ty, cx.next_node_id()),
    <expr:Expr>               => surface::Ensures::Pred(expr),
}

WhereBoundPredicate: surface::WhereBoundPredicate = {
    <lo:@L> <bounded_ty:Ty> ":" <bounds:GenericBounds>  <hi:@R> => {
        surface::WhereBoundPredicate {
            span: cx.map_span(lo, hi),
            bounded_ty,
            bounds,
        }
    }
}

GenericBounds: surface::GenericBounds = {
    <bound:Path> => vec![surface::TraitRef { path: bound } ]
}

FnInput: surface::FnInput = {
    <bind:Ident> ":" "&" "strg" <ty:Ty>              => surface::FnInput::StrgRef(<>, cx.next_node_id()),
    <bind:Ident> ":" <path:Path> "{" <pred:Expr> "}" => surface::FnInput::Constr(<>, cx.next_node_id()),
    <bind:Ident> ":" <ty:Ty>                         => surface::FnInput::Ty(Some(bind), ty, cx.next_node_id()),
    <ty:Ty>                                          => surface::FnInput::Ty(None, <>, cx.next_node_id()),
}

pub Ty: surface::Ty = {
    <lo:@L> <kind:TyKind> <hi:@R> => surface::Ty {
        kind,
        node_id: cx.next_node_id(),
        span: cx.map_span(lo, hi)
    },
    <lo:@L> "(" <tys:Punctuated<Ty, ",">> ")" <hi:@R> => {
        if tys.len() == 1 && !tys.trailing_punct() {
            tys.into_values().pop().unwrap()
        } else {
            let kind = surface::TyKind::Tuple(tys.into_values());
            surface::Ty {
                kind,
                node_id: cx.next_node_id(),
                span: cx.map_span(lo, hi),
            }
        }
    }
}

ConstArg: surface::ConstArg = {
   <lo:@L> <lit:Lit> <hi:@R> =>? {
       let span = cx.map_span(lo, hi);
       let mut kind = surface::ConstArgKind::Infer;
       if let surface::LitKind::Integer = lit.kind {
        if let Ok(val) = lit.symbol.as_str().parse::<usize>() {
            let kind = surface::ConstArgKind::Lit(val);
            return Ok(surface::ConstArg { kind, span });
        }
       }
       Err( ParseError::User { error: UserParseError::UnexpectedToken(lo, hi) })
   },
   <lo:@L> "_" <hi:@R> => {
       let span = cx.map_span(lo, hi);
       let kind = surface::ConstArgKind::Infer;
       surface::ConstArg { kind, span }
   }
}

TyKind: surface::TyKind = {
    "_"                                               => surface::TyKind::Hole,
    <bty:BaseTy>                                      => surface::TyKind::Base(<>),
    <bty:BaseTy> "[" <indices:Indices> "]"            => surface::TyKind::Indexed { <> },
    <bty:BaseTy> "{" <bind:Ident> ":" <pred:Expr> "}" => surface::TyKind::Exists { <> },
    "{" <ty:Ty> "|" <pred:Expr> "}"                   => surface::TyKind::Constr(pred, Box::new(ty)),
    "{" <params:Comma1<RefineParam<"?">>> "." <ty:Ty> <pred:("|" <Expr>)?> "}" => {
        surface::TyKind::GeneralExists { params, ty: Box::new(ty), pred }
    },

    "&" <ty:Ty>                     => surface::TyKind::Ref(surface::Mutability::Not, Box::new(ty)),
    "&" "mut" <ty:Ty>               => surface::TyKind::Ref(surface::Mutability::Mut, Box::new(ty)),

    "[" <ty:Ty> ";" <len:ConstArg> "]" =>? {
        return Ok(surface::TyKind::Array(Box::new(ty), len));
    },

    "impl" <bounds:GenericBounds> => surface::TyKind::ImplTrait(cx.next_node_id(), bounds),
}

#[inline]
BaseTy: surface::BaseTy = {
    <lo:@L> <kind:BaseTyKind> <hi:@R> => surface::BaseTy {
        kind,
        span: cx.map_span(lo, hi)
    }
}

#[inline]
BaseTyKind: surface::BaseTyKind = {
    <path:Path>      => surface::BaseTyKind::Path(None, path),
    "[" <ty:Ty> "]"  => surface::BaseTyKind::Slice(Box::new(ty)),
    <lo:@L> "<" <qself:Ty> "as" <segments1:PathSegments> ">" "::" <segments2:PathSegments> <hi:@R> => {
        let mut segments = segments1;
        segments.extend(segments2);
        let path  = surface::Path {
            segments,
            refine: vec![],
            node_id: cx.next_node_id(),
            span: cx.map_span(lo, hi),
        };
        surface::BaseTyKind::Path(Some(Box::new(qself)), path)
    }
}

GenericArgs: Vec<surface::GenericArg> = AngleBrackets<Comma<GenericArg>>;

GenericArg: surface::GenericArg = {
    <bind:Ident> "=" <ty:Ty> => surface::GenericArg {
        kind: surface::GenericArgKind::Constraint(bind, ty),
        node_id: cx.next_node_id(),
    },
    <ty:Ty> => surface::GenericArg {
        kind: surface::GenericArgKind::Type(ty),
        node_id: cx.next_node_id()
    },
}


RefineArgs: Vec<surface::RefineArg> = {
   "(" <Comma<RefineArg>> ")"
}

Path: surface::Path = {
    <lo:@L> <segments:PathSegments> <refine:RefineArgs?> <hi:@R> => {
        surface::Path {
            segments,
            node_id: cx.next_node_id(),
            refine: refine.unwrap_or_default(),
            span: cx.map_span(lo, hi),
        }
    }
}

PathSegments: Vec<surface::PathSegment> = {
    <Sep1<"::", PathSegment>>
}

PathSegment: surface::PathSegment = {
    <ident:Ident> <args:GenericArgs?> => surface::PathSegment {
        ident,
        args: args.unwrap_or_default(),
        node_id: cx.next_node_id(),
    }
}

Indices: surface::Indices = {
    <lo:@L> <indices:Comma<RefineArg>> <hi:@R> => surface::Indices { indices, span: cx.map_span(lo, hi) }
};

RefineArg: surface::RefineArg = {
    <lo:@L> "@" <bind:Ident> <hi:@R> => surface::RefineArg::Bind(bind, surface::BindKind::At, cx.map_span(lo, hi), cx.next_node_id()),
    <lo:@L> "#" <bind:Ident> <hi:@R> => surface::RefineArg::Bind(bind, surface::BindKind::Pound, cx.map_span(lo, hi), cx.next_node_id()),
    <Expr>                           => surface::RefineArg::Expr(<>),
    <lo:@L> "|"<params:RefineParams<"?">> "|" <body:Expr> <hi:@R> => {
        surface::RefineArg::Abs(params, body, cx.map_span(lo, hi), cx.next_node_id())
    }
};

pub Expr = Level1<"true">;

Level1<AllowStruct> = NonAssoc<BinOp1, Level2<AllowStruct>>;  // <=>
Level2<AllowStruct> = LeftAssoc<BinOp2, Level3<AllowStruct>>; // =>
Level3<AllowStruct> = LeftAssoc<BinOp3, Level4<AllowStruct>>; // ||
Level4<AllowStruct> = LeftAssoc<BinOp4, Level5<AllowStruct>>; // &&
Level5<AllowStruct> = NonAssoc<BinOp5, Level6<AllowStruct>>;  // ==, !=, >=, <=
Level6<AllowStruct> = LeftAssoc<BinOp6, Level7<AllowStruct>>; // >>, <<
Level7<AllowStruct> = LeftAssoc<BinOp7, Level8<AllowStruct>>; // +, -
Level8<AllowStruct> = LeftAssoc<BinOp8, Level9<AllowStruct>>; // *, %, /
Level9<AllowStruct> = {
    <lo:@L> <op:UnOp> <e:Level10<AllowStruct>> <hi:@R> => {
        surface::Expr {
            kind: surface::ExprKind::UnaryOp(op, Box::new(e)),
            node_id: cx.next_node_id(),
            span: cx.map_span(lo, hi),
        }
    },
    <Level10<AllowStruct>>
}
Level10<AllowStruct>: surface::Expr = {
    <lo:@L> <name:ExprPath> "{" <args:Comma<ConstructorArg>> "}" <hi:@L> if AllowStruct == "true" => {
    	surface::Expr {
            kind: surface::ExprKind::Constructor(Some(name), args) ,
	    node_id: cx.next_node_id(),
	    span: cx.map_span(lo, hi),
	}
    },
    <lo:@L> "{" <args:Comma<ConstructorArg>> "}" <hi:@L> if AllowStruct == "true" => {
    	surface::Expr {
            kind: surface::ExprKind::Constructor(None, args) ,
	    node_id: cx.next_node_id(),
	    span: cx.map_span(lo, hi),
	}
    },
    <lo:@L> "if" <p:Level1<"false">> "{" <e1:Level1<AllowStruct>> "}" <e2:ElseIf> <hi:@R> => {
        surface::Expr {
            kind: surface::ExprKind::IfThenElse(Box::new([p, e1, e2])),
            node_id: cx.next_node_id(),
            span: cx.map_span(lo, hi),
        }
    },
    <lo:@L> <lit:Lit> <hi:@R> => {
        surface::Expr {
            kind: surface::ExprKind::Literal(lit),
            node_id: cx.next_node_id(),
            span: cx.map_span(lo, hi),
        }
    },
    <lo:@L> <path:ExprPath> "." <fld:Ident> <hi:@R> => {
        surface::Expr {
            kind: surface::ExprKind::Dot(path, fld),
            node_id: cx.next_node_id(),
            span: cx.map_span(lo, hi),
        }
    },
    <lo:@L> <f:Ident> "(" <args:Comma<Level1<AllowStruct>>> ")" <hi:@R> => {
        surface::Expr {
            kind: surface::ExprKind::App(f, args),
            node_id: cx.next_node_id(),
            span: cx.map_span(lo, hi),
        }
    },
    <lo:@L> <path:ExprPath> <hi:@R> => surface::Expr {
        kind: surface::ExprKind::Path(path),
        node_id: cx.next_node_id(),
        span: cx.map_span(lo, hi),
    },
    <lo:@L> "<" <qself:Ty> "as" <path:Path> ">" "::" <name:Ident> "(" <fun_args:Comma<Expr>> ")" <hi:@R> => {
        let alias = surface::AliasReft { qself: Box::new(qself), path, name };
        surface::Expr {
            kind: surface::ExprKind::Alias(alias, fun_args),
            node_id: cx.next_node_id(),
            span: cx.map_span(lo, hi),
        }
    },
    <lo:@L> "forall" <param:RefineParam<"?">> "in"  <i:Lit>  ".." <j:Lit> "{" <p:Level1<"false">> "}" <hi:@R> =>? {
      if let surface::LitKind::Integer = i.kind {
        if let surface::LitKind::Integer = j.kind {
          if let Ok(start) = i.symbol.as_str().parse::<usize>() {
            if let Ok(end) = j.symbol.as_str().parse::<usize>() {
              return Ok(surface::Expr {
                kind: surface::ExprKind::BoundedQuant(surface::QuantKind::Forall, param, surface::Range {start, end}, Box::new(p)),
                node_id: cx.next_node_id(),
                span: cx.map_span(lo, hi),
              })
            }
         }
      }
      }
      Err( ParseError::User { error: UserParseError::UnexpectedToken(lo, hi) })
    },
    <lo:@L> "exists" <param:RefineParam<"?">> "in"  <i:Lit>  ".." <j:Lit> "{" <p:Level1<"false">> "}" <hi:@R> =>? {
      if let surface::LitKind::Integer = i.kind {
        if let surface::LitKind::Integer = j.kind {
          if let Ok(start) = i.symbol.as_str().parse::<usize>() {
            if let Ok(end) = j.symbol.as_str().parse::<usize>() {
              return Ok(surface::Expr {
                kind: surface::ExprKind::BoundedQuant(surface::QuantKind::Exists, param, surface::Range {start, end}, Box::new(p)),
                node_id: cx.next_node_id(),
                span: cx.map_span(lo, hi),
              })
            }
         }
      }
      }
      Err( ParseError::User { error: UserParseError::UnexpectedToken(lo, hi) })
    },
    "(" <Level1<AllowStruct>> ")"
}

ConstructorArg: surface::ConstructorArg = {
    <lo:@L> <name:Ident> ":" <arg:Level1<"true">> <hi:@L> => {
    	surface::ConstructorArg::FieldExpr(surface::FieldExpr {
	    ident: name,
	    expr: arg,
	    node_id: cx.next_node_id(),
	    span: cx.map_span(lo, hi)
	})
    },
    <lo:@L> ".." <spread:Level1<"true">> <hi:@L> => {
    	surface::ConstructorArg::Spread(surface::Spread {
	    expr: spread,
	    node_id: cx.next_node_id(),
	    span: cx.map_span(lo, hi)
	})
    }
}

ElseIf: surface::Expr = {
    "else" <lo:@L> "if" <p:Level1<"false">> "{" <e1:Level1<"true">> "}" <e2:ElseIf> <hi:@R> => {
        surface::Expr {
            kind: surface::ExprKind::IfThenElse(Box::new([p, e1, e2])),
            node_id: cx.next_node_id(),
            span: cx.map_span(lo, hi),
        }
    },
    "else" "{" <Level1<"true">> "}"
}

ExprPath: surface::ExprPath = {
    <lo:@L> <segments:Sep1<"::", Ident>> <hi:@R> => surface::ExprPath {
        segments: segments
            .into_iter()
            .map(|ident| surface::ExprPathSegment { ident, node_id: cx.next_node_id() })
            .collect(),
        node_id: cx.next_node_id(),
        span: cx.map_span(lo, hi),
    }
}

NonAssoc<Op, NextLevel>: surface::Expr = {
    <lo:@L> <e1:NextLevel> <op:Op> <e2:NextLevel> <hi:@R> => surface::Expr {
        kind: surface::ExprKind::BinaryOp(op, Box::new([e1, e2])),
        node_id: cx.next_node_id(),
        span: cx.map_span(lo, hi)
    },
    NextLevel
}
LeftAssoc<Op, NextLevel>: surface::Expr = {
    <lo:@L> <e1:LeftAssoc<Op, NextLevel>> <op:Op> <e2:NextLevel> <hi:@R> =>
        surface::Expr {
            kind: surface::ExprKind::BinaryOp(
                op,
                Box::new([e1, e2])
            ),
            node_id: cx.next_node_id(),
            span: cx.map_span(lo, hi),
        },
    NextLevel
}

BinOp1: surface::BinOp = {
    "<=>" => surface::BinOp::Iff
}

BinOp2: surface::BinOp = {
    "=>" => surface::BinOp::Imp
}

BinOp3: surface::BinOp = {
    "||" => surface::BinOp::Or,
}

BinOp4: surface::BinOp = {
    "&&" => surface::BinOp::And,
}

BinOp5: surface::BinOp = {
    "==" => surface::BinOp::Eq,
    "!=" => surface::BinOp::Ne,
    ">" => surface::BinOp::Gt,
    ">=" => surface::BinOp::Ge,
    "<" => surface::BinOp::Lt,
    "<=" => surface::BinOp::Le,
}

BinOp6: surface::BinOp = {
    "|"  => surface::BinOp::BitOr,
    "&"  => surface::BinOp::BitAnd,
    "<<" => surface::BinOp::BitShl,
    <lo:@L> ">(?=>)" ">" <hi:@R> => surface::BinOp::BitShr,
}

BinOp7: surface::BinOp = {
    "+" => surface::BinOp::Add,
    "-" => surface::BinOp::Sub,
}

BinOp8: surface::BinOp = {
    "*" => surface::BinOp::Mul,
    "%" => surface::BinOp::Mod,
    "/" => surface::BinOp::Div,
}

UnOp: surface::UnOp = {
    "!" => surface::UnOp::Not,
    "-" => surface::UnOp::Neg,
}

Lit: surface::Lit = "literal";

Ident: surface::Ident = {
    <lo:@L> <name:"ident"> <hi:@R> => {
        surface::Ident { name, span: cx.map_span(lo, hi) }
    }
}

// Something enclosed by angle brackets. This handles the case where there are two adjacent
// angle brackets which we tokenize differently to account for the right shift operator.
AngleBrackets<T>: T = {
    "<" <T> ">",
    "<" <T> ">(?=>)",
}

Sep<S, T>: Vec<T> = {
    <mut v:(<T> S)*> <e:T?> => {
        if let Some(e) = e { v.push(e); }
        v
    }
}

Sep1<S, T>: Vec<T> = {
    <mut v:(<T> S)*> <e:T> => {
        v.push(e);
        v
    }
}

Comma<T> = Sep<",", T>;
Comma1<T> = Sep1<",", T>;

Punctuated<T, S>: surface::Punctuated<T, S> = {
    <v:(T S)*> <e:T?> => {
        let mut v = surface::Punctuated::from(v);
        if let Some(e) = e { v.push_value(e); }
        v
    }
}


Binding<A, B>: (A, B) = <A> ":" <B>;

extern {
    type Location = Location;
    type Error = UserParseError;

    enum Token {
        "mut" => Token::Mut,
        "strg" => Token::Strg,
        "requires" => Token::Requires,
        "ensures" => Token::Ensures,
        "where" => Token::Where,
        "forall" => Token::Forall,
        "exists" => Token::Exists,
        "in" => Token::In,
        "impl" => Token::Impl,
        "qualifier" => Token::Qualifier,
        "sort" => Token::Sort,
        "opaque" => Token::Opaque,
        "local" => Token::Local,
        "bitvec" => Token::BitVec,
        "literal" => Token::Literal(<Lit>),
        "ident"   => Token::Ident(<Symbol>),
        "fn" => Token::Fn,
        "async" => Token::Async,
        "type" => Token::Type,
        "ref" => Token::Ref,
        "hrn" => Token::Hrn,
        "hdl" => Token::Hdl,
        "as" => Token::As,
        "@"  => Token::At,
        "#"  => Token::Pound,
        "==" => Token::EqEq,
        "!=" => Token::Ne,
        "="  => Token::Eq,
        "&&" => Token::AndAnd,
        "||" => Token::OrOr,
        "=>" => Token::FatArrow,
        "<=>" => Token::Iff,
        "+"  => Token::Plus,
        "-"  => Token::Minus,
        "/"  => Token::Slash,
        "!"  => Token::Not,
        "*"  => Token::Star,
        "<<" => Token::Shl,
        "|"  => Token::Caret,
        "("  => Token::OpenDelim(Delimiter::Parenthesis),
        ")"  => Token::CloseDelim(Delimiter::Parenthesis),
        "{"  => Token::OpenDelim(Delimiter::Brace),
        "}"  => Token::CloseDelim(Delimiter::Brace),
        "["  => Token::OpenDelim(Delimiter::Bracket),
        "]"  => Token::CloseDelim(Delimiter::Bracket),
        "<"  => Token::Lt,
        "<=" => Token::Le,
        ">"  => Token::Gt,
        ">(?=>)"  => Token::GtFollowedByGt,
        ">=" => Token::Ge,
        ":"  => Token::Colon,
        "."  => Token::Dot,
        ";"  => Token::Semi,
        ","  => Token::Comma,
        "->" => Token::RArrow,
        "&"  => Token::And,
        "%"  => Token::Percent,
        "if"   => Token::If,
        "else" => Token::Else,
        "::" => Token::PathSep,
        "_" => Token::Underscore,
        ".." => Token::DotDot,
    }
}
